@page "/online/place/edit/{id:int}"
@page "/online/place/create"
@inherits OwningComponentBase<WarehouseContext>
@inject NavigationManager NavManager

<link href="~/css/BlazorValidation.css" rel="stylesheet" />

<h3 class="bg-@Theme text-center text-@TextColor p-2">@Mode</h3>

<div>
    <NavLink class="btn btn-secondary" href="online/place">Назад</NavLink>
</div>

@if (PlaceData is null)
{
    <div class="row">
        <div colspan="6" class="p-5 text-center">Загрузка ...</div>
    </div>
}
else
{
    <EditForm Model="PlaceData" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        @if (!IsModeCreate)
        {
            <div class="form-group">
                <label>ID</label>
                <InputNumber class="form-control" @bind-Value="PlaceData.Id" disabled />
            </div>
        }
        <div class="form-group">
            <label>Название места</label>
            <ValidationMessage For="@(() => PlaceData.Name)" />
            <InputText class="form-control" @bind-Value="PlaceData.Name" />
        </div>
        <div class="form-group">
            <label>Сортировка</label>
            <ValidationMessage For="@(() => PlaceData.Order)" />
            <InputNumber class="form-control" @bind-Value="PlaceData.Order" />
        </div>
        <div class="form-group">
            <label>Номер места</label>
            <ValidationMessage For="@(() => PlaceData.Number)" />
            <InputNumber class="form-control" @bind-Value="PlaceData.Number" />
        </div>
        <div class="form-group">
            <label>Вид товаров</label>
            <ValidationMessage For="@(() => PlaceData.ProductTypeId)" />
            <InputSelect class="form-select" @bind-Value="PlaceData.ProductTypeId">
                <option selected value="0">--- Невыбранный вид товара ---</option>
                @foreach (var item in ProductTypes.Keys)
                {
                    <option value="@item">@ProductTypes[item]</option>
                }
            </InputSelect>
        </div>
        <div class="form-group">
            <label>Количество пачек товара</label>
            <ValidationMessage For="@(() => PlaceData.Count)" />
            <InputNumber class="form-control" @bind-Value="PlaceData.Count" />
        </div>
        <div class="form-group">
            <label>Вместимость этого места</label>
            <ValidationMessage For="@(() => PlaceData.Size)" />
            <InputNumber class="form-control" @bind-Value="PlaceData.Size" />
        </div>
        <div class="form-group">
            <label>Дата и время помещения товара</label>
            <ValidationMessage For="@(() => PlaceData.LastDateTime)" />
            <InputDate class="form-control" @bind-Value="PlaceData.LastDateTime" />
        </div>
        <div class="form-group">
            <label>Статус места хранения товаров</label>
            <InputSelect class="form-select" @bind-Value="PlaceData.PlaceStatus">
                @foreach (var item in PlaceStatuses.Keys)
                {
                    <option value="@item">@PlaceStatuses[item]</option>
                }
            </InputSelect>
        </div>
        <div class="form-group">
            <label>Комментарий</label>
            <ValidationMessage For="@(() => PlaceData.Comment)" />
            <InputText class="form-control" @bind-Value="PlaceData.Comment" />
        </div>
        <div class="form-group">
            <label>Метка удаления вида товаров</label>
            <InputCheckbox class="form-check-input" @bind-Value="PlaceData.IsDelete" />
        </div>
        <div class="text-center mt-4">
            <button type="submit" class="btn btn-@Theme">Сохранить</button>
        </div>
    </EditForm>
}

@code {
    WarehouseContext Context => Service;
    [Parameter]
    public int Id { get; set; }
    public bool IsModeCreate => Id == 0;

    public Place? PlaceData { get; set; }
    public IDictionary<int, string> ProductTypes { get; set; } = new Dictionary<int, string>();
    public IDictionary<PlaceStatus, string> PlaceStatuses { get; set; } = new Dictionary<PlaceStatus, string>();
    protected async override Task OnParametersSetAsync()
    {        
        if (IsModeCreate)
            PlaceData = new Place();
        else
            PlaceData = await Context.Places.FindAsync(Id);
        ProductTypes = await Context.ProductTypes.Where(pt => !pt.IsDelete).ToDictionaryAsync(d => d.Id, d => d.Name);
        PlaceStatuses = Enum.GetValues<PlaceStatus>().ToDictionary(e => e, e => Place.GetNamePlaceStatus(e));
    }

    public async Task HandleValidSubmit()
    {
        if (PlaceData.ProductTypeId == 0)
            PlaceData.ProductTypeId = null;
        if (IsModeCreate)
            Context.Add(PlaceData!);
        await Context.SaveChangesAsync();
        NavManager.NavigateTo("online/place");
    }

    public string Mode => IsModeCreate ? "Создание нового места хранений товаров" : "Редактирование места хранений товаров";
    public string Theme => IsModeCreate ? "success" : "info";
    public string TextColor => IsModeCreate ? "white" : "dark";
}
