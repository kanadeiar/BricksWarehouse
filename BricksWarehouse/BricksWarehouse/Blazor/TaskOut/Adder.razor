@page "/online/taskout/create"
@inherits OwningComponentBase<WarehouseContext>
@inject NavigationManager NavManager
@inject IToastService toastService

<link href="~/css/BlazorValidation.css" rel="stylesheet" />

<h3 class="bg-danger text-center text-white p-2">Добавление нового задания на отгрузку товаров со склада</h3>

<div class="col-md-6 shadow bordered p-1">
    <div>
        <NavLink class="btn btn-secondary" href="online/taskout">Назад</NavLink>
    </div>

    @if (TaskOutData is null)
    {
        <div class="row">
            <div class="p-5 text-center">Загрузка ...</div>
        </div>
    }
    else
    {
        <EditForm Model="TaskOutData" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator/>
            <div class="form-group">
                <label>Название задания</label>
                <ValidationMessage For="@(() => TaskOutData.Name)" />
                <InputText class="form-control" @bind-Value="TaskOutData.Name" />
            </div>
            <div class="form-group">
                <label>Номер задания</label>
                <ValidationMessage For="@(() => TaskOutData.Number)" />
                <InputNumber class="form-control" @bind-Value="TaskOutData.Number" />
            </div>
            <div class="form-group">
                <label>Вид товаров</label>
                <ValidationMessage For="@(() => TaskOutData.ProductTypeId)" />
                <InputSelect class="form-select" @bind-Value="TaskOutData.ProductTypeId">
                    <option selected value="0">--- Невыбранный вид товара ---</option>
                    @foreach (var item in ProductTypes.Keys)
                    {
                        <option value="@item">@ProductTypes[item]</option>
                    }
                </InputSelect>
            </div>
            <div class="form-group">
                <label>Количество пачек товара</label>
                <ValidationMessage For="@(() => TaskOutData.Count)" />
                <InputNumber class="form-control" @bind-Value="TaskOutData.Count" />
            </div>
            <div class="form-group">
                <label>Регистрационный номер грузовика</label>
                <ValidationMessage For="@(() => TaskOutData.TruckNumber)" />
                <InputText class="form-control" @bind-Value="TaskOutData.TruckNumber" />
            </div>
            <div class="form-group">
                <label>Дата и время создания задания</label>
                <ValidationMessage For="@(() => TaskOutData.CreatedDateTime)" />
                <InputDate class="form-control" @bind-Value="TaskOutData.CreatedDateTime" />
                <input class="form-control my-1" type="time" @bind="TaskOutData.CreatedDateTime" />
            </div>
            <div class="form-group">
                <label>Комментарий</label>
                <ValidationMessage For="@(() => TaskOutData.Comment)" />
                <InputText class="form-control" @bind-Value="TaskOutData.Comment" />
            </div>
            <div class="mt-4">
                <button type="submit" class="btn btn-success">Сохранить</button>
            </div>
        </EditForm>
    }
</div>


@code {
    WarehouseContext Context => Service;

    public OutTask? TaskOutData { get; set; }
    public IDictionary<int, string> ProductTypes { get; set; } = new Dictionary<int, string>();

    protected async override Task OnInitializedAsync()
    {
        TaskOutData = new OutTask();
        ProductTypes = await Context.ProductTypes.Where(pt => !pt.IsDelete).ToDictionaryAsync(d => d.Id, d => d.Name);
    }

    public async Task HandleValidSubmit()
    {
        if (TaskOutData?.ProductTypeId == 0)
            TaskOutData.ProductTypeId = null;
        Context.Add(TaskOutData!);
        toastService.ShowSuccess("Успещно добавлено новое задание на отгрузку товаров со склада", "Замечательно");
        await Context.SaveChangesAsync();
        NavManager.NavigateTo("online/taskout");
    }
}
